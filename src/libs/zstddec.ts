/**
 * @author Don McCurdy / https://www.donmccurdy.com
 */

import { zstdWasm } from "./zstd.size";

let init: Promise<void>,
  instance: {
    exports: {
      memory: { buffer: Iterable<number> };
      malloc: (arg0: any) => any;
      ZSTD_findDecompressedSize: (arg0: any, arg1: any) => any;
      ZSTD_decompress: (arg0: any, arg1: any, arg2: any, arg3: any) => any;
      free: (arg0: any) => void;
    };
  },
  heap: Uint8Array;

const importObject = {
  env: {
    emscripten_notify_memory_growth: function (index) {
      // @ts-ignore
      heap = new Uint8Array(instance.exports.memory.buffer);
    },
  },
};

/**
 * ZSTD (Zstandard) decoder.
 *
 * Compiled from https://github.com/facebook/zstd/tree/dev/contrib/single_file_libs, with the
 * following steps:
 *
 * ```
 * ./combine.sh -r ../../lib -o zstddeclib.c zstddeclib-in.c
 * emcc zstddeclib.c -Oz -s EXPORTED_FUNCTIONS="['_ZSTD_decompress', '_ZSTD_findDecompressedSize', '_ZSTD_isError', '_malloc', '_free']" -s ALLOW_MEMORY_GROWTH=1 -s MALLOC=emmalloc -o zstddec.wasm
 * base64 zstddec.wasm > zstddec.txt
 * ```
 *
 * The base64 string written to `zstddec.txt` is embedded as the `wasm` variable at the bottom
 * of this file. The rest of this file is written by hand, in order to avoid an additional JS
 * wrapper generated by Emscripten.
 */
class ZSTDDecoder {
  init() {
    if (!init) {
      init = fetch('data:application/wasm;base64,' + zstdWasm)
        .then(response => response.arrayBuffer())
        .then(arrayBuffer => WebAssembly.instantiate(arrayBuffer, importObject))
        .then(result => {
          // @ts-ignore
          instance = result.instance;

          importObject.env.emscripten_notify_memory_growth(0); // initialize heap.
        });
    }

    return init;
  }

  decode(array, uncompressedSize = 0) {
    // Write compressed data into WASM memory.
    const compressedSize = array.byteLength;
    const compressedPtr = instance.exports.malloc(compressedSize);
    heap.set(array, compressedPtr);

    // Decompress into WASM memory.
    uncompressedSize =
      uncompressedSize ||
      Number(
        instance.exports.ZSTD_findDecompressedSize(
          compressedPtr,
          compressedSize,
        ),
      );
    const uncompressedPtr = instance.exports.malloc(uncompressedSize);
    const actualSize = instance.exports.ZSTD_decompress(
      uncompressedPtr,
      uncompressedSize,
      compressedPtr,
      compressedSize,
    );

    // Read decompressed data and free WASM memory.
    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);
    instance.exports.free(compressedPtr);
    instance.exports.free(uncompressedPtr);

    return dec;
  }
}

export { ZSTDDecoder };
